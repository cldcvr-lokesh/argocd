
name: Create terraform plan

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  terraform:
    name: "Terraform"
    runs-on: [self-hosted, my-runner]
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0
        with:
          fetch-depth: 0
      - run: git fetch origin
      - name: Setup Nodejs
        uses: actions/setup-node@v1

      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: |
              ls -l
              dirs=$(git diff 'remotes/origin/master' remotes/origin/${GITHUB_HEAD_REF} --name-only | grep -v '^.github/' | xargs dirname  | uniq)
              for dir in $dirs
              do
              cd ${GITHUB_WORKSPACE}/$dir && terraform init -input=false
              done


      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      - name: "Run - Terraform Plan & Apply"
        id: plan
        if: github.event_name == 'pull_request'
        run: |
            dirs=$(git diff 'remotes/origin/master' remotes/origin/${GITHUB_HEAD_REF}  --name-only | grep -v '^.github/' | xargs dirname  | uniq)
            for dir in $dirs
            do
            cd ${GITHUB_WORKSPACE}/$dir && terraform plan -input=false -no-color > tfplan
            cat >> ${GITHUB_WORKSPACE}/tfplan <<EOF
            #### Terraform Plan for ${GITHUB_WORKSPACE}/$dir
            <details><summary>Show Plan</summary>
            \`\`\`

            cat ${GITHUB_WORKSPACE}/$dir/tfplan
            \`\`\`
            </details>
            EOF
            done
            cat ${GITHUB_WORKSPACE}/tfplan

      - name: Read tfplan
        id: data
        uses: juliangruber/read-file-action@v1
        with:
          path: ./tfplan

      - name: Get version
        id: vars
        run: echo ::set-output name=data::$(cat tfplan)

      - name: Create comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v1
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
              <details><summary>Show Plan</summary>
              ```
              
              Terraform used the selected providers to generate the following execution
              plan. Resource actions are indicated with the following symbols:
                + create

              Terraform will perform the following actions:

                # aws_instance.web will be created
                + resource "aws_instance" "web" {
                    + ami                                  = "ami-01079af93e791f059"
                    + arn                                  = (known after apply)
                    + associate_public_ip_address          = (known after apply)
                    + availability_zone                    = (known after apply)
                    + cpu_core_count                       = (known after apply)
                    + cpu_threads_per_core                 = (known after apply)
                    + disable_api_termination              = (known after apply)
                    + ebs_optimized                        = (known after apply)
                    + get_password_data                    = false
                    + host_id                              = (known after apply)
                    + id                                   = (known after apply)
                    + instance_initiated_shutdown_behavior = (known after apply)
                    + instance_state                       = (known after apply)
                    + instance_type                        = "t3.micro"
                    + ipv6_address_count                   = (known after apply)
                    + ipv6_addresses                       = (known after apply)
                    + key_name                             = (known after apply)
                    + monitoring                           = (known after apply)
                    + outpost_arn                          = (known after apply)
                    + password_data                        = (known after apply)
                    + placement_group                      = (known after apply)
                    + placement_partition_number           = (known after apply)
                    + primary_network_interface_id         = (known after apply)
                    + private_dns                          = (known after apply)
                    + private_ip                           = (known after apply)
                    + public_dns                           = (known after apply)
                    + public_ip                            = (known after apply)
                    + secondary_private_ips                = (known after apply)
                    + security_groups                      = (known after apply)
                    + source_dest_check                    = true
                    + subnet_id                            = (known after apply)
                    + tags                                 = {
                        + "Name" = "HelloWorld"
                      }
                    + tags_all                             = {
                        + "Name" = "HelloWorld"
                      }
                    + tenancy                              = (known after apply)
                    + user_data                            = (known after apply)
                    + user_data_base64                     = (known after apply)
                    + vpc_security_group_ids               = (known after apply)

                    + capacity_reservation_specification {
                        + capacity_reservation_preference = (known after apply)

                        + capacity_reservation_target {
                            + capacity_reservation_id = (known after apply)
                          }
                      }

                    + ebs_block_device {
                        + delete_on_termination = (known after apply)
                        + device_name           = (known after apply)
                        + encrypted             = (known after apply)
                        + iops                  = (known after apply)
                        + kms_key_id            = (known after apply)
                        + snapshot_id           = (known after apply)
                        + tags                  = (known after apply)
                        + throughput            = (known after apply)
                        + volume_id             = (known after apply)
                        + volume_size           = (known after apply)
                        + volume_type           = (known after apply)
                      }

                    + enclave_options {
                        + enabled = (known after apply)
                      }

                    + ephemeral_block_device {
                        + device_name  = (known after apply)
                        + no_device    = (known after apply)
                        + virtual_name = (known after apply)
                      }

                    + metadata_options {
                        + http_endpoint               = (known after apply)
                        + http_put_response_hop_limit = (known after apply)
                        + http_tokens                 = (known after apply)
                        + instance_metadata_tags      = (known after apply)
                      }

                    + network_interface {
                        + delete_on_termination = (known after apply)
                        + device_index          = (known after apply)
                        + network_interface_id  = (known after apply)
                      }

                    + root_block_device {
                        + delete_on_termination = (known after apply)
                        + device_name           = (known after apply)
                        + encrypted             = (known after apply)
                        + iops                  = (known after apply)
                        + kms_key_id            = (known after apply)
                        + tags                  = (known after apply)
                        + throughput            = (known after apply)
                        + volume_id             = (known after apply)
                        + volume_size           = (known after apply)
                        + volume_type           = (known after apply)
                      }
                  }

              Plan: 1 to add, 0 to change, 0 to destroy.

              ─────────────────────────────────────────────────────────────────────────────

              Note: You didn't use the -out option to save this plan, so Terraform can't
              guarantee to take exactly these actions if you run "terraform apply" now.
              ```
              </details>

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

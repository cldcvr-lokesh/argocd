
name: Terraform plan

on:
  pull_request:

jobs:

  terraform:
    name: "Terraform"
    runs-on: [self-hosted, my-runner]
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0
        with:
          fetch-depth: 0
      - run: git fetch origin
      - name: Setup Nodejs
        uses: actions/setup-node@v1

      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      - name: Get branch diff
        id: gitdiff
        run: |
          dirs=$(git diff 'remotes/origin/master' remotes/origin/${GITHUB_HEAD_REF} --name-only | grep -v '^.github/' | xargs dirname  | uniq)
          echo $dirs
          echo "::set-output name=dir::$dir"

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: |
              if [[ steps.gitdiff.outputs.dir != "" ]];then
              ls -l
              dirs=$(git diff 'remotes/origin/master' remotes/origin/${GITHUB_HEAD_REF} --name-only | grep -v '^.github/' | xargs dirname  | uniq)
              for dir in $dirs
              do
              cd ${GITHUB_WORKSPACE}/$dir && terraform init -input=false
              done
              fi


      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      - name: "Run - Terraform Plan"
        id: plan
        continue-on-error: true
        if:  github.event_name == 'pull_request'
        run: |
            echo ${{steps.gitdiff.outputs.dir}}
            if [[ steps.gitdiff.outputs.dir != "" ]];then
            dirs=$(git diff 'remotes/origin/master' remotes/origin/${GITHUB_HEAD_REF}  --name-only | grep -v '^.github/' | xargs dirname  | uniq)
            for dir in $dirs
            do
            cd ${GITHUB_WORKSPACE}/$dir && terraform plan -input=false -no-color > tfplan 2>&1 && echo "<details><summary>$dir</summary>" >>  ${GITHUB_WORKSPACE}/tfplan || { echo '::set-output name=TF_PLAN_STATUS::fail'; echo "<details><summary>Error in $dir terraform plan</summary>" >>  ${GITHUB_WORKSPACE}/tfplan; }
            cat >> ${GITHUB_WORKSPACE}/tfplan <<EOF

            \`\`\`

            `cat tfplan`

            \`\`\`

            </details>

            EOF
            done
            fi

      - name: Read tfplan
        id: data
#        if: steps.gitdiff.outputs.dir != ''
        uses: juliangruber/read-file-action@v1
        continue-on-error: true
        with:
          path: ./tfplan

      - uses: actions/github-script@0.9.0
        if: ${{ github.event_name == 'pull_request'}}
        env:
          PLAN: "${{ steps.data.outputs.content }}"
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Terraform PLAN outputs

            ${process.env.PLAN}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        run: |
          if [[ ${{ steps.palm.outputs.TF_PLAN_STATUS }} == "fail" ]];then
          exit 1
          fi
